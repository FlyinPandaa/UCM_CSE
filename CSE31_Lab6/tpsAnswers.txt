TPS 1

1. Once fib.s is assembled, open the Execute tab (it should be opened by default after assembled). Two 
segments of memory are displayed here: Text Segment and Data Segment. What are the starting 
addresses of Text Segment and Data Segment? Give your answers in Hex format.

    The starting addresses of text segment is 0x00004020. For data segment, the starting address is 0x10010000.

2. The Text Segment shows you how each actual machine code is stored in the memory (again it is 
simulated) and its corresponding MIPS code. Two types of MIPS code are shown here: Basic and Source. 
We call the Basic one True Assembly Language, and the Source one MIPS Assembly Language. 
From the display, what can you tell about the difference between the two in terms of their relationship 
with the machine code? We will cove this topic in future lectures.

    The basic shows the true assembly language that is being used and the source code is showing pseudo instructions.

3. Now, let us take a look at the Data Segment. How much difference in bytes are there between 2 address 
locations (again, the addresses are in Hex)?

    The difference between two locations is 2 bytes (0x10010000 -> 0x10010020).

4. For each address location, how many columns are there?

    There are 8 columns.

5. What can you tell about the relationship between the address difference and the number of columns at 
each address location?

    There are 8 columns and the address difference is 20 bytes. The column numbers grow by 2 while the address grows by 20.

6. From the source code, how do you create a new variable/label named m and set it to 20?

    First you would create a label called 'm' outside of the other variables. To set the value of 'm' to 20 we will type the following: .word 20. Now we will
    go to the main and load 'm' by typing: lw $t0, m. Register t0 now holds 20.

7. Save and assemble your file. At what address is the value of m stored?

    M is stored in address 0x00400014.

8. Besides numbers, we can also initialize strings for the program to use. Search from the Internet on how 
to declare a string named str1 and set it to “I love CSE31!”

    We can initialize a string by declaring 'str1' then  using the '.asciiz' to insert our string. It would look something like this: str1: .asciiz "\nI love CSE31!\n".

9. Insert the declaration of str1 in your code and assemble it. From the Data Segment, we can see that 
the string is occupying 3 address locations. At what addresses is str1 stored?

    Str1 is being stored in the following address locations: 0x10010004, 0x10010008, 0x1001000c, and 0x100100010.

10. str1 is stored as numerical values in the memory. Check the ASCII box and observe how it is stored. 
Does the display of characters agree with what you have learned from Lab 04 about how an array of 
characters is stored?

    Yes, since the values are being stored backwards.

11. In order to print str1, we will need to use syscall function. Search the Internet to find out how to 
print str1.

    We will have to use 'li' instruction to let the program know what to output. Next we need to load the string into an address location with the 'la' instruction.
    After that we can call syscall to have our program output the string. In that case this will be the instructions:

        li $v0, 4
        la $a0, Str1
        syscall

12. Now let us go back to the program. Search from the Internet to find out what “la $t3, n” does. 
What will be the value stored in $t3 after running this instruction? From this we can see that we cannot 
use the initialized variables (labels) directly in our MIPS program. We need to use la, then lw to save 
the value into a register

    An address will be stored in 't3' because we loaded the address of 'n', but not the value of it (with lw).

TPS 2

1. From lectures, we have learned that we can perform different inequality comparisons (<, >, <=, >=) by 
using only slt, beq, and bne instructions. Why not having one instruction for each inequality in 
MIPS?

    When we are programming in a low-level language like MIPS, we need to have as little instructions as possible. And if manipulating slt, beq, and bne instructions achieves
    the correct result. There is no need for more new instructions.

2. Declare a new variable/label (n) and set it to 25.

    Done.

3. Insert instructions to declare the following strings: 
    a. str1: "Less than\n" 
    b. str2: "Less than or equal to\n" 
    c. str3: "Greater than\n" 
    d. str4: "Greater than or equal to\n"

4. Insert instructions to read in an integer from users. Search from the Internet on how to use syscall to 
do it.

    Done.

5. Insert code so the program will compare if the user input is less than n. If it is, output “Less than”.

    Done.

6. Insert code so the program will compare if the user input is greater than or equal to n. If it is, output 
“Greater than or equal to”.

    Done.

7. Now comment out your code from steps 5 and 6. Insert code so the program will compare if the user 
input is greater than n. If it is, output “Greater than”.

    Done.

8. Insert code so the program will compare if the user input is less than or equal to n. If it is, output “Less 
than or equal to”. 

    Done.