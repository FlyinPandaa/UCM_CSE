TPS 1

1. Open MemCast.c, compile and run the program. What do you expect the program to print? (%x in 
printf allows an integer to be printed in Hex format). 

    Will most likely see the addresses of the integers instead of values.

2. Before changing the code, what do you expect the program to print if you print four_ints[0] 
again at the end of the program? 

    It will print a random integer.

3. Insert a print statement to output four_ints[0] at the end of the program and verify your answer 
from (2). 

    It indeed does print a random integer.

4. Now add a print statement to the program so it will print out four_ints[1]. What does it print? Are 
you surprised (or lost) by the results? 

    The "four_ints[1]" prints out a two and that was not what I was expecting it to print.

5. Let us study the code carefully and investigate what happened. No, the memory did not go crazy.  
    a. How many array(s) were allocated in this program? 

        There is 2 arrays with the size of 4 in this program.

    b. Are four_ints and four_c pointing to the same location? 

        No, they are point in different locations
        
    c. Verify your answer of (b) by printing out the values of four_ints and four_c.  

        The outputs were different (2 and 42).

6. Write a loop to print out the addresses and values (in Hex) of all the elements of four_ints. What is 
the difference in addresses between two consecutive elements? Discuss what this difference means. 

    The difference in values between two consecutive elements is 4 bits. Since they are integers, they are 4 bits each. that's
    why the differnece between two consecutive elements is 4 bits.


7. Use a piece of paper to draw the layout of the array horizontally so that the smallest address begins 
from the RIGHT-hand-side. Indicate the address and value of each element based on the results of 
(6). You can draw it digitally. 



8. Now, write a loop to print out the same information for four_c as you did in (6). What is the 
difference in addresses between two consecutive elements? Discuss what this difference means. 

    The difference in values between two consecutive elements is 1 for four_c. This means that characters are valued at 1 bit.

9. Use the same piece of paper (or file) from (7) to draw a similar structure for four_c. 



10. By comparing the layout of the array pointed by the two pointers, what do you observe in terms of how 
C accesses memory when the index of an array is incremented? 


TPS 2

1. Open Array2D.c. This program will create a n x n array of int. Explain what line #8 does.

    Initializes a 2 pointer array (2d array) and dynamically allocates enough memory space for the 2D array.

2. Since every array must be allocated in the memory before it can be used, we need to allocate the rows 
one by one. To do this, we need to be able to access the pointers from the first array (pointed by arr). 
Assuming i is the index of that array, how do we access the ith value of the array?

    We would be using pointer notation for this, so we create a for loop that goes through the 2d array. Then we would type the
    following code to dynamically allocate space for as many rows and columns as we need.

    Code here: for(int i = 0; i <n; i++){
                    *(arr + i) = (int*)malloc(n * sizeof(int));
                }

3. Without using array notations ([]), insert code to complete allocating all the rows and initialize all 
contents to be 0. Your code should work with different values for n. Hint: if j is the index of each 
row, how do you access arr[i][j] in pointer notation?

    Now that we have constructed the first for loop, we will construct the second for loop to set all values created to 0.
    To do this, we would have to add the (arr + i) with j. Then initialize all values in the 2D array to 0. 

    Code here: for(j = 0; j < n; j++){
			        *(*(arr + i) + j) = 0;
		        }

    The above code will be the second for loop (nested for loop) in the code.

4. To verify whether you have created your array correctly, we need a function to print out the array. The 
function printArray has been declared. It takes in both the array to be printed and size of array. Why 
do we need to pass the size as an argument?

    The size of the array is the "n" that is declared in the main function. This allows us to pass in the size of the array, so
    that the function knows how many rows and columns to print.

5. Complete printArray so it prints out the content and layout of an array correctly.

    

6. Now, let us modify the content of the array. Insert code to make the array into a diagonal matrix that 
looks like the following (again, do not limit the size to 5): 