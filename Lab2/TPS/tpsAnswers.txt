TPS 1

1. Record your TPS partnersâ€™ names. 
    - AJ Grant
    - Adam Crawford
    - Ikenna Onuorah

2. Independently search the internet for 3 online tutorials on how to setup and use GDB (or LLDB) in 
your system.
    - https://www.tutorialspoint.com/gnu_debugger/gdb_quick_guide.htm
    - https://web.stanford.edu/class/archive/cs/cs107/cs107.1174/guide_gdb.html
    - https://www.youtube.com/watch?v=bWH-nL7v5F4

3. Share your tutorials with your TPS partners. 
    - https://lldb.llvm.org/use/map.html
    - https://opensource.apple.com/source/lldb/lldb-310.2.36/www/tutorial.html
    - https://aaronbloomfield.github.io/pdr/tutorials/02-lldb/index.html
    - http://www.gdbtutorial.com/tutorial/how-install-gdb
    - https://www.geeksforgeeks.org/gdb-step-by-step-introduction/
    - https://www.youtube.com/watch?v=bWH-nL7v5F4
    - https://www.youtube.com/watch?v=svG6OPyKsrw
    - https://web.eecs.umich.edu/~sugih/pointers/summary.html

4. Bookmark your results in the browser of your computer. 


TPS 2

1. How do you compile your punishment.c so that you can debug it using GDB (or LLDB for MAC)? 
Try it with your code and set the name of the executable to punish.

    The following command is how one would compile punishment.c with GDB, "gcc -g punishment.c -o punish".

2. Once punishment.c is compiled, how do you load it in GDB (or LLDB for MAC)? Try it with your 
program.

    You would type the following command in your terminal, "gdb punish". This will run the debugger for punishment.c.

3. Once punish is loaded, how do you run it in GDB (or LLDB for MAC)? Try to run your punish. 

    To run the punishment.c in GDB, type "r" in the terminal.

4. What are breakpoints? How do you set a breakpoint at a certain line of your program? Try to set a 
breakpoint in punishment.c where the for loop begins. 

    Breakpoints is used to stop or pause the program at a certain line in the code. To set a breakpoint at a certain line, type "break N"
    (N = line number).

5. Now run the program again. It should stop at the breakpoint you set in Q4. From here, how do you run 
the program line by line? Try to run the next 3 lines with your program. 

    To run the program line by line after implementing a breakpoint, you would type the command "next" to go to the next line.

6. While you are still running punish line by line, how can you see the value of a variable? Pick 3 variables 
in your program and display them in the terminal one by one. 

    You would type the following into the terminal, "Print <variable>".

7. Now that you are tired of running line by line, how do you let the program finish its run? Try to finish 
running your punish. 

    As long as you didn't set another breakpoint after the initial breakpoint, you can type the command "continue" to finish the program.        

8. How do you exit from GDB (or LLDB for MAC)? 

    Simply type in "q" to quit GDB.


TPS 3

1. How many variables were declared in the first line of main()? How many of them are pointers (and 
what are they)? 

    There are 4 variables declared in the first line of main, and two of them are pointers (px and py).

2. What will be the values of x, y, and arr[0] if you run the program? Validate your answer by running 
the program. Why do you think it happens that way? You will need to insert printf statements to 
display those values. 

    Both x and y will be get random values assigned to them. We didn't initialize the variables with a value when we declared them. 

3. How do you prevent x, y, and the content of arr from having unexpected values? Try to fix them in 
the program. 

    You would initialize x and y to a value, such as zero (int x=0, y=0).

4. The moment you have declared a variable, the program will allocate a memory location for it. Each 
memory location has an address. Now insert printf statements to display the addresses of x and y. 

    For this, we would type in the following print statement, "printf(%p\n", &x)" and "printf(%p\n", &y)".

5. Now insert code so that px points to x and py points to y. Print out the values and addresses of those 
pointers using only the pointer variables (yes, pointers have addresses too!). You should see that the value of 
px is equal to the address of x, and the same is true for py and y. 

6. As we have learned in lectures, an array name can be used as a pointer to access the content of the array. 
Write a loop to output the contents of arr by using arr as a pointer (do not use [] in your loop). 

7. Are array names really the same as pointers? Let us find out! An array name points to the first element 
of an array, so arr should point to the address of arr[0]. Insert code to verify this. 

8. Now print out the address of arr. Does the result make sense? Why? 

    Yes, because the address of arr is being incremented with the a++ at the end of the for loop.


