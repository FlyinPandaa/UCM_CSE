TPS 1

1. Before we use a new tool, we will need to find out how to use it. MARS DOES NOT mean that MIPS 
is an alien language (well, sort of). Work with your partner and find out what MARS stands for.

    MARS stands for " MIPS Assembler and Runtime Simulator".

2. Since you have found out what MARS stands for, you probably have found out the webpage of MARS 
as well. Visit the download page and download MARS in your computer. To run MARS, just double-
click the downloaded jar file. You will need Java to run it. Note: MARS is not pre-installed in the lab 
computers, so you need to download it if you are using a lab computer. But before running the jar file 
you will have to mark the file as user-executable. To do this, navigate to the folder where you have 
downloaded the jar file and run the command chmod u+x Mars4_5.jar. After this, you may 
double-click the jar file to run it. 

    

3. From the Tutorial materials page (you can find the link to it from the home page), save both tutorial 
materials (MARS feature map and MARS tutorial) as well as Fibonacci.asm in your Lab_5 folder. 



4. Follow Part 1 : Basic MARS Use in the tutorial using Fibonacci.asm and discuss the following 
questions: 
    a. How do you load an assembly file?

        Go to file->open-> assembly file -> load file.

    b. How do you assemble (compile) the program? 

        At the top, there will be a scredriver and wrench icon. Click it to compile program.

    c. How do you run the assembled program? 

        The green play button next to the compile button will run the program.

    d. Can you run a program before assembling it? 

        You must compile/assemble the program before being able to run it.

    e. If you want to run the assembled program line by line, how to do it? 

        At the top there will be be a play button with a 1 next to it. Click that button to run the next command.

    f. How do you run the program again after it has finished running?

        Click the green double play button to reset program.


TPS 2

1. What do the .data, .word, .text directives mean (i.e., what do you put in each section)? 

    The data loads up data that the assembler can use. Word creates an array for the assembler to load the values into.
    The text directives allows for text to be printed.

2. What does line 10 do? 

    If the two values we are comparing in the assembler is equal, then branch to the statement. In our case it would be "finish".

3. What does line 15 do? 

    Jump (without fulfilling any conditions) to "fib" address. 

4. How do you set a breakpoint in MARS? Set breakpoint on line 15 and list the steps of achieving this. 

    Compile the program, and then you will be redirected to the executable section. In there, find the line you want to
    set a breakpoint. To the left, you will see a check box, check it to set the breakpoint.

5. After your program stops because of a breakpoint, how do you continue to execute your code? How do 
you step through your code? 

    To continue the program after the breakpoint, click on the run button that has a 1 next to it.

6. How can you find out the content of a register? How do you modify the value of a register manually 
while running the program?  

    Looking at the right-hand side of the screen, we can see the contents of register. Make sure that the values displayed in
    hexadecimal is disabled/unchecked. Simply double click the values to manually modify them.

7. At what address is n stored in memory? Calculate the 13th fib number by modifying this memory 
location. 


 
8. Line 19 and 21 use the syscall instruction. What is it and how do you use it? 

    You perform the syscall instruction to get an output from the system. Make sure you have li instruction before the syscall.