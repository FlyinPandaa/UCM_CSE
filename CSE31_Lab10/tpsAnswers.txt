TPS 1

1. What is cache? Why do we need cache? 

    Cache is a copy of a subset of memory. We need cache to help reduce the impact that the mismatch in speed between the processor and 
    memory produces. Essentially, speeding up the process of data retrieval since memory (RAM) is slower than the processer.

2. There are generally 2 practical ways to organize a cache: Direct-mapped cache and N-way set associative 
cache. In both types of cache, data at a specific address of the main memory (RAM) are mapped to a 
pre-defined location in the cache. A “Block” is the basic unit of data being mapped between the main 
memory and cache. The size of a block depends on the specification of a cache. Every time data is 
transferred between cache and the main memory, it is a block of data being transferred. In this 
exercise, we will explore the Direct-mapped cache. 

    Done.

3. In a Direct-mapped cache, the cache is organized as a hash table. Addresses of the main memory are 
mapped to the indices of the cache (block numbers) using a modulo operator (%) as the hash function. 
As a result, we can divide a memory address into 3 fields: tag, index, offset. 

    Done.

4. Offset bits tell us how many bytes of data are in a block. These bits are the right-most bits of the 
memory address. You can consider this as the number of columns of data in a cache. With a specific 
value of the offset bits from an address, we know which column of a block we are trying to access. 
Given the block size of a cache is 16B (bytes), how many bits do we need for offset? What is the 
number of bits in offset as a function of block size? Is it practical to have a cache of block size = 1 byte? 

    It would be 2^n = 16b, so then n(the offset) would be 4 bits. Number  of  bits in offset as a function of block size is 2 bits. 
    Mainly depends on how much data is being stored, and having a larger block size (up to a certain point) is ideal. That being said, 
    it can be practical if the amount of data is small or if there are a lot of blocks.

5. Index bits tell us how many blocks there are in a cache. These bits are the next right-most bits of the 
memory address after the offset bits. You can consider this as the number of blocks (rows) of data 
in a cache. With a specific value of the index bits from an address, we know which block (row) we are 
trying to access. Given there are 64 blocks in a cache, how many index bits do we need? What is the 
number of bits in index as a function of number of blocks? 

    We would have the following function: 2^n = x and n = index bits. So in this case, it would be 64 * 16 = 1024 index bits.

6. Once you know the number of blocks and the block size of a cache, do you know the total size of the 
cache? How? 

    Yes, because of the function stated in question 5: number of blocks * block size = Area.

7. Since the size of cache is always smaller than the size of the main memory, the sum of bits of the offset 
and index of a cache will be less than the number of bits in an address of the main memory. What do we 
do to the left-over bits from the address? Why are they important? 

    The left over bits are the tag which tells us where the data will be written/loaded into.

8. Given a memory address of 20 bits (during Intel 8086 era), 128B of direct-mapped cache, and 8B 
block size, answer the following questions: 
    a. How big is this main memory? 

        2^20 = 1,048,576 

    b. How many offset bits? 

        2^n = 8; n(offset bits) = 3

    c. How many blocks are there in the cache? 

        128 bytes

    d. How many index bits? 

        2^n = 128; n(index bits) = 7

    e. How many tag bits? 

        There would be 10 tag bits.

    f. Draw the layout of the cache: including tags, valid bits, dirty bits, and data blocks.



    g. What is the number of bits per row of the cache (number of bits being used in a row: tag, valid bit, 
dirty bits, and data block)?

    5 bits



TPS 2

1. What is the disadvantage of a Direct-mapped cache? What kind of cache miss will it introduce? 

    Direct-mapped cache can limit what data can go where. Only certain data with a certain tag can write into a block. 
    We would run into compulsory misses and conflict misses. Compulsory misses when a program is first loaded. conflict
    misses, because when  the  program is writing data, it will eventually run into a case where two blocks has the same
    tag. One will have to be replaced, and that can end up being an endless cycle of block replacement and writing.
    

2. To overcome this problem, we can allow multiple blocks of data to occupy the same set of a cache. 
Note that we use “set” here instead of index of cache. In this organization, we group N blocks (rows) of 
cache into a set and allow more than one block of data to stay within a set. The layout of the cache 
remains the same as its direct-mapped version, but the difference is that every N blocks are now being 
grouped into a set. 

    Done.

3. The memory address is still partitioned into the same 3 fields, but the index bits now refer to the set 
number. Given a cache with 1024 blocks and the associativity is 4 (4 blocks per set), how many index 
bits do we need? What is the number of bits in index as a function of number of blocks and 
associativity? 

    We would need an index bit of 8, because 1024/4 = 256; 2^n = 256; n = 8. Number of  bits in index as a function is: 8*4 = 32 bits.

4. Given a memory address of 20 bits (during Intel 8086 era), 128B of 2-way cache, and 8B block size, 
answer the following questions: 
    a. How big is this main memory? 



    b. How many offset bits? 



    c. How many blocks are there in the cache? 



    d. How many sets are there in the cache? 



    e. How many index bits? 



    f. How many tag bits? 



    g. Draw the layout of the cache: including tags, valid bits, dirty bits, and data blocks. Indicate the sets 
    with a different color (or a thicker) boarder. 



    h. What is the number of bits per row of the cache (number of bits being used in a row: tag, valid bit, 
    dirty bits, and data block)? 


    