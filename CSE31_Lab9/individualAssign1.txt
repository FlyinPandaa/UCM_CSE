Line #7:
    Machine Code: 
        001000(opcode) + 00000(rs) + 10000(rt) + 1111111111110001(immediate) --> 001000 00000 10000 1111111111110001
    MIPS Instruction:
        First, we place 'addi' because it isn't an abbreviated operation. We then look at the MIPS reference sheet and see that $zero is stored in register number 0, so we place a $0. 
        Then, we see that the end result register is $s0, or $16 in register number, so we place that after $0. Finally, we have the immediate value, which, in hex, is the expressed as -15. 
        
        End result: addi $0 $16 -15



2.	Convert slt $t0, $s0, $s1 to machine code:

a.	slt is an R-Type instruction, which means it has the six fields:
i.	opcode: 00 0000
ii.	rs: 1 0000
iii.	rt: 1 0001
iv.	rd: 0 1000
v.	shamt: 0 0000
vi.	funct: 10 1010

b.	Machine instruction:
i.	Binary: 0000 0010 0001 0001 0100 0000 0010 1010 
ii.	Hexadecimal: 0x0211402A

3.	Convert beq $t0, $zero, LEEQ

a.	beq is an I-Type instruction, which means it has four fields:
i.	opcode -> beq: 00 0100
ii.	rs -> $t0: 0 1000
iii.	rt -> $zero: 0 0000 
iv.	immediate: 0000 0000 0000 0110

b.	Machine instruction:
i.	Binary: 0001 0001 0000 0000 0000 0000 0000 0110
ii.	Hexadecimal: 0x11000006

4.	Convert j GRT to machine code:

a.	j is a J-Type instruction, which means it has two fields:
i.	opcode -> j: 00 0010
ii.	immediate: 00 0001 0000 0000 0000 0000 0111 

b.	Machine instruction:
i.	Binary: 0000 1000 0001 0000 0000 0000 0000 0111
ii.	Hexadecimal: 0x08100007
