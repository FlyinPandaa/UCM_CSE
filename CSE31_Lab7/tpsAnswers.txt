TPS 1

1. Perform a search on the Internet on the difference(s) between the terms procedures, functions, and 
methods. 

    Procedure doesn't return values, functions take in multiple values and can return one or multiple values, and methods closes over 
    a set value such as 0.

2. As we have learned in lectures, our compiled program is stored in the static part of the memory when it 
is being executed. When the CPU runs a program, it executes the statements according to the statement 
order (line numbers). Unless there is a branch (beq/bne) or jump (j/jal) statement, it will just 
execute the next statement. 

    Done.

3. Load proc1.s in MARS and study the MIPS program without assembling and running it. Write an 
equivalent program in C and name it proc1.c. You can treat m and n as variables declared in main. 

    Done.

4. In proc1.s, we use j SUM to ask the CPU to jump to the line with the label SUM and continue 
running the program from there. What line number is this (i.e., the line number pointed to by label 
SUM)? What does this line do? 

    The jump is called at line 12, and it tells the program to go to sum and to continue the instructions there.

5. After function SUM is over, the program is supposed to return to the line after j SUM. In the code, jr 
$ra is used. Can we use j instead (assuming we can create a label for that line)? 

    No, because then you won't be able to reuse the function sum, or at least the address needs to be able to changed
    or be modified.

6. Since the return address keeps changing depending on where SUM is called, we need to save the return 
address before SUM is called. At what line in proc1.s is the return address supposed to be saved? In 
what register is the address saved to? What is the value of address being saved here? Does this address 
value make sense? 

    Line 21 is where the return address is supposed to be saved. The register the address is saved to is 31. No, since it isn't the address
    that is displayed in the text segment.

7. Assemble the code and open the Execute tab. Here the program is listed in the Text Segment (as we have 
seen this in last lab). What happens when you try to run the program? This error is due to the invalid 
return address (program counter tells the CPU where to look for a statement). 

    Gets an error: "invalid program counter value: 0x0000000".

8. Now, let us correct the return address value. From the Text Segment window, what is the address of the 
statement that the program should return to from SUM? 

    The correct return address value is 0x00400020.

9. Modify the code so the correct return address is saved. Assemble it and look at the Text Segment again. 
(DO NOT execute it yet!) Double check the return address. Is it correct? What happened? You will 
know more about what happened here in later lectures.  

    It changed to 0x00400028, since it has 3 more lines of code (from SUM label).

10. What is the new return address? Modify your code, assemble, and run the program. What is the output 
of the program? 

    The new return address is 0x00400028.

11. As you can see, saving the correct return address before each procedure call is tedious. It would be nice 
if the assembler can do it for us! Instead of using j to call a procedure, what operator should we use? 

    We can use Jal.

12. Modify the code so you do not use j to call SUM. Make sure to comment out the line where the 
return address is saved (with your modifications from earlier steps). 

    Done.

TPS 2

1. Study proc2.c and trace the program. What will be the output if you run the program? Compile and 
run proc2.c in a terminal (or any IDE) and verify your answer. 

    The answer is 38.

2. Load proc2.s in MARS. This is the MIPS version of proc2.c. Do not assemble and run this 
program, as there are errors due to the misuse of registers. Study the MAIN function and discuss with 
your partners about what it does (compare it with the C version). 

    Where variables are declared and shows the order in which instructions are called/executed. 

3. When MAIN calls SUM, SUM knows where to return to. Why? After SUM called SUB, what happens to the 
address returning to MAIN? Discuss with your partners about how you would resolve this problem.  Do 
not attempt to fix it yet, as we have more problems to come. 

    SUM knows where to return to, but it's going to be different when the program goes to SUB then it's going to be hard to get the address 
    back to MAIN.

4. The input argument (n) in function SUM is used to call the next function, SUB, as well as being added to 
the return value. According to the register convention, the first argument of all function calls must be 
stored in $a0. From line 28 of proc2.s, the value in $a0 is no longer the same as the input argument 
of SUM (it has been changed to store input argument of SUB). We can resolve this problem by saving the 
original $a0 into a temporary register, but we may eventually run out of registers if our program is large. 
Discuss with your partners about how you would resolve this problem. Do not attempt to fix it yet. 

    Done.

5. Have look at line 25. What happens to the original value in $s0 from MAIN after this statement is 
executed? Is this a problem? Why? Discuss with your partners about how you would fix this problem. 
Do not attempt to fix it yet. 

    It will overwrite itself.

6. Now we know that SUM needs to backup 3 values before calling SUB. Insert prologue and epilogue into 
the code so the program will run correctly. (Hint: study function SUB, as it does not contain any errors)

    Done.